schema {
  query: Query
  mutation: Mutation
}

enum SprintState {
  closed
  active
  future
}

enum IssuePriority {
  Highest
  High
  Medium
  Low
  Lowest
}

type Query {
  #Sprint
  getSprints: [Sprint!]!
  getCurrentSprint: Sprint

  #Issue
  getSprintIssues(sprintId: ID!): [Issue!]!
  getIssue(issueId: ID!): Issue!

  #Transition
  getTransitions(issueId: ID!): [Transition!]!
}

type Mutation {
  #Issue
  moveIssue(issueId: ID!, transitionId: ID!): Boolean
  updateIssue(issueId: ID!, input: UpdateIssueInput!): Boolean
}

type User {
  id: ID!
  displayName: String!
  emailAddress: String!
}

type BoardConfiguration {
  columns: [String!]!
}

type Sprint {
  id: ID!
  name: String!
  startDate: String!
  endDate: String!
  state: SprintState!
  goal: String
  self: String!
  issues: [Issue!]!
  configuration: BoardConfiguration!
}

type Issue {
  id: ID!
  key: String!
  summary: String!
  type: String!
  description: String
  priority: IssuePriority!
  status: String!
  transitions: [Transition!]!
  reporter: User
  author: User
  subTasks: [Issue!]!
  isSubTask: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Transition {
  id: ID!
  name: String!
}

input UpdateIssueInput {
  summary: String!
  description: String
  dueDate: String
}
